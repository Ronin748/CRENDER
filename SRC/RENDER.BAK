#include "SRC\RENDER.H"

int redraw = 0;
int itime = 0;
char vmode = 0;

int pg = 0;

int wireframe = 0;
int faceculling = 1;
int zsort = 1;

void interrupt getTime()
{
	itime += 1;
	redraw = 1;
}

unsigned now() {
	return (unsigned)time(NULL);
}

void r_init()
{
	char p;
	p = pg;

	asm {
		mov ah, 0x0f
		int 0x10
		mov vmode, al // get current video mode

		mov ah, 0
		mov bh, p
		mov al, 0x13 // set 13
		int 0x10

		mov ah, 0x48
		mov bx, 0x10 // 64k
		int 0x21
	}
}

void r_exit()
{
	asm {
		mov ah, 0
		mov bh, 0
		mov bx, 0
		mov al, vmode // return original video mode
		int 0x10
	}
}

void r_flip()
{
	char p;
	p = pg;

	asm {
		mov ah, 05h
		mov al, p
		int 10h
	}
}

void r_drawpixel(int x, int y, unsigned char c)
{
	asm {
		mov ax, VSTART
		mov es, ax

		mov dx, y
		mov ax, W
		imul dx
		add ax, x

		mov di, ax

		mov dl, c
		mov [es:di], dl
	}
}

void r_swap()
{
	asm {
		mov ax, 0xa0a0
		mov bx, 0xd0a0
		mov es, ax
		mov ds, bx
		mov di, 0
		mov dl, 2
	}
	draw:
	asm {
		mov dl, [ds:di]
		mov [es:di], dl
		add di, 1
		cmp di, 0xf960
		jb draw
	}
}

void r_drawrect(int x, int y, int w, int h, unsigned char c)
{
	h += y;
	w += x;

	x = clamp(x, L, R);
	y = clamp(y, L, R);
	w = clamp(w, L, R);
	h = clamp(h, L, R);

	if (w <= x || h <= y) {
		return;
	}

	h *= W;
	y *= W;

	asm {
		push bp
		mov ax, VSTART
		mov es, ax

		mov dl, c

		mov si, x
		mov ax, si
		mov bx, y
		mov cx, w
		mov bp, h
	}
	draw:
	asm {
		mov di, ax
		add di, bx
		mov [es:di], dl
		inc ax
		cmp ax, cx
		jb draw
		add bx, W
		mov ax, si
		cmp bx, bp
		jb draw
	}
	asm pop bp
}

// line draw, pretty slow, implement in asm
void r_drawline(float (*v0)[2], float (*v1)[2], unsigned char c)
{
	int x;
	int y;
	int vx0 = (*v0)[0];
	int vy0 = (*v0)[1];
	float dx;
	float dy;
	float k;
	int i;
	int s;
	float kx;
	float ky;
	float diff;

	dx = (*v1)[0] - vx0;
	dy = (*v1)[1] - vy0;

	k = dy/dx;

	if (fabs(k) <= 1) {
		s = sign(dx);
		ky = k;
		kx = 1.0f;
		diff = fabs(dx);
	}
	else {
		s = sign(dy);
		kx = 1.0f/k;
		ky = 1.0f;
		diff = fabs(dy);
	}

	for (i = 0; i <= diff; i += 1) {
		x = vx0 + (float)i*s*kx;
		y = vy0 + (float)i*s*ky;

		x = clamp(x, L, R);//distortion
		y = clamp(y, T, B);

		y *= W;
		x += y;

		asm {
			mov ax, VSTART
			mov es, ax
			mov di, x
			mov dl, c
			mov [es:di], dl
		}
	}
}

void r_drawlinef(float x0, float y0, float x1, float y1, unsigned char c)
{
	float v0[2];
	float v1[2];

	x0 = clamp(x0, L, R);
	x1 = clamp(x1, L, R);
	y0 = clamp(y0, L, R);
	y1 = clamp(y1, L, R);

	v0[0] = x0;
	v0[1] = y0;

	v1[0] = x1;
	v1[1] = y1;

	r_drawline(&v0, &v1, c);
}

// horizontal line draw with x sort, usually fast
void r_drawlineh(int x0, int x1, int y, unsigned char c)
{
	int to;
	if (x0 > x1) {
		to = x0;
		x0 = x1;
		x1 = to;
	}

	asm {
		mov ax, VSTART
		mov es, ax

		mov dx, y
		mov ax, W
		imul dx

		mov bx, x1
		mov di, x0
		add bx, ax
		add di, ax

		mov dl, c
	}
	draw:
	asm {
		mov [es:di], dl
		inc di
		cmp di, bx
		jb draw
	}
}

/*
 * triangle draw coordinate system
 * same as opengl with origin [0.0f, 0.0f]
 * screen range [-1.0f, 1.0f], [-1.0f, 1.0f]
*/
void r_drawtri(float v[3][2], unsigned char c)
{
	float to;
	int i = 0;
	int xl0;
	int xl1;
	int yl;

	float k0;
	float k1;
	float k2;

	float dx1;
	float dx2;

	float dy1;
	float dy2;

	char dc = c;

	float px = 0.5f;

	// transform from gl to pix
	float x0 = (v[0][0]+1.0f)*W*0.5f;
	float y0 = (-v[0][1]+1.0f)*H*0.5f;

	float x1 = (v[1][0]+1.0f)*W*0.5f;
	float y1 = (-v[1][1]+1.0f)*H*0.5f;

	float x2 = (v[2][0]+1.0f)*W*0.5f;
	float y2 = (-v[2][1]+1.0f)*H*0.5f;

	// sort vertices
	if (y0 > y2) {
		to = y0;
		y0 = y2;
		y2 = to;
		to = x0;
		x0 = x2;
		x2 = to;
	}
	if (y1 > y2) {
		to = y1;
		y1 = y2;
		y2 = to;
		to = x1;
		x1 = x2;
		x2 = to;
	}
	if (y0 > y1) {
		to = y0;
		y0 = y1;
		y1 = to;
		to = x0;
		x0 = x1;
		x1 = to;
	}

	x0 = round(x0);
	x1 = round(x1);
	x2 = round(x2);

	y0 = round(y0);
	y1 = round(y1);
	y2 = round(y2);

	// bounds
	if (x0 > R && x1 > R && x2 > R)
		return;
	if (x0 < L && x1 < L && x2 < L)
		return;
	if (y0 > B && y1 > B && y2 > B)
		return;
	if (y0 < T && y1 < T && y2 < T)
		return;

	if (wireframe) {
		r_drawlinef(x0, y0, x1, y1, c);
		r_drawlinef(x1, y1, x2, y2, c);
		r_drawlinef(x0, y0, x2, y2, c);

		return;
	}

	// first - last
	dx1 = (x2 - x0);
	dy1 = (y2 - y0);
	k0 = (dx1/dy1);
	if (dy1 == 0) k0 = 0;

	// first - mid
	dx1 = (x1 - x0);
	dy1 = (y1 - y0);
	k1 = (dx1/dy1);
	if (dy1 == 0) k1 = 0;

	// mid - last
	dx2 = (x2 - x1);
	dy2 = (y2 - y1);
	k2 = (dx2/dy2);
	if (dy2 == 0) k2 = 0;

	dy1 = fabs(dy1);
	dy2 = fabs(dy2);

	//y2 -= 1.0f; // float offs

	x1 = x0;
	to = k0;
	if (k0 > k1) {
		k0 = k1;
		k1 = to;
	}

	// top
	for (i = 0; i < ceil(dy1 - 1.0f); i += 1) {
		x0 += k0;
		x1 += k1;
		y0 += 1.0f;

		xl0 = round(x0 - px);
		xl1 = round(x1 + px);
		yl = round(y0);

		xl0 = clamp(xl0, L, R);
		xl1 = clamp(xl1, L, R);
		//yl = clamp(yl, T, B);
		if (yl <= T) continue;
		if (yl >= B) break;

		asm {
			mov ax, VSTART
			mov es, ax

			mov dx, yl
			mov ax, W
			imul dx

			mov bx, xl1
			mov di, xl0
			add bx, ax
			add di, ax

			mov dl, dc
		}
		draw1:
		asm {
			mov [es:di], dl
			add di, 1
			cmp di, bx
			jb draw1
		}
	}

	//if (fabs(k2) <= EPSILON)
	//	return;

	k0 = to;
	if (k0 < k2) {
			to = k0;
			k0 = k2;
			k2 = to;
	}
	dy2 += 1.0f;
	y2 = y2 - dy2;
	x1 = x2 - k0*(dy2);
	x2 = x2 - k2*(dy2);

	// bottom
	for (i = 0; i < ceil(dy2 - 1.0f); i += 1) {
		x1 += k0;
		x2 += k2;
		y2 += 1.0f;

		xl0 = round(x1 - px);
		xl1 = round(x2 + px);
		yl = round(y2);

		xl0 = clamp(xl0, L, R);
		xl1 = clamp(xl1, L, R);
		//yl = clamp(yl, T, B);
		if (yl <= T) continue;
		if (yl >= B) break;

		asm {
			mov ax, VSTART
			mov es, ax

			mov dx, yl
			mov ax, W
			imul dx

			mov si, xl1
			mov di, xl0
			add si, ax
			add di, ax

			mov dl, dc
		}
		draw2:
		asm {
			mov [es:di], dl
			add di, 1
			cmp di, si
			jb draw2
		}
	}
}

/*
	Triangle fill using floats
	Perfect clipping and small error
*/
void r_halftrifill(float x0, float x1, int y,
										int dy, float k0, float k1,
										unsigned char c)
{
	int i, xi0, xi1;

	for (i = 0; i < dy; i += 1) {
		x0 += k0;
		x1 += k1;
		y += 1;

		xi0 = (int) clamp(x0 - 0.1f, L, R);
		xi1 = (int) clamp(x1 + 0.1f, L, R);

		if (y <= T) continue;
		if (y >= B) return;

		asm {
			mov ax, VSTART
			mov es, ax

			mov dx, y
			mov ax, W
			imul dx

			mov si, xi1
			mov di, xi0
			add si, ax
			add di, ax

			mov dl, c
		}
		drawt:
		asm {
			mov [es:di], dl
			add di, 1
			cmp di, si
			jb drawt
		}
	}
}

/*
	Asm triangle fill using integers
	fast, but bad clipping and precision
*/
void r_fasthalftrifill(float x0, float x1, int y,
										int dy, float k0, float k1,
										unsigned char c)
{
	int xi0, xi1, ki0, ki1, ye;

	xi0 = (int)(x0*64.0f);
	xi1 = (int)(x1*64.0f);
	ki0 = (int)(k0*64.0f);
	ki1 = (int)(k1*64.0f);

	ye = clamp(y + dy, T, B); // clip bottom
	dy = y;
	y = clamp(y, T, B);

	if (y >= ye) return;

	xi0 += ki0 * (y - dy); // clip top
	xi1 += ki1 * (y - dy);

	y *= W;
	ye *= W;

	asm {
		mov ax, VSTART // video memory start
		mov es, ax

		mov bx, xi0 // initial points
		mov cx, xi1
		mov dx, y
	}
	drawt:
	asm {
		add bx, ki0 // x0 += k0
		add cx, ki1 // x1 += k1
		add dx, W // y += 1
	}
	asm {
		mov di, bx
		sub di, 32 // correction
		sar di, 6 // divide by 128

		mov si, cx
		add si, 32
		sar si, 6
	}
	asm { // clip left
		mov ax, L
		cmp di, ax
		jg nlc
		mov di, L

		//mov ax, L
		cmp si, ax
		jg nlc
		mov si, L
	}
	nlc:
	asm { // clip right
		mov ax, R
		cmp si, ax
		jl nrc
		mov si, R

		//mov ax, R
		cmp di, ax
		jl nrc
		mov di, R
	}
	nrc:
	asm {
		add si, dx // calculate final addresses
		add di, dx

		mov al, c // color
	}
	drawl: // line draw
	asm {
		mov [es:di], al // write to screen
		add di, 1
		cmp di, si
		jb drawl // x < x1?

		mov ax, ye
		cmp dx, ax
		jb drawt // lines left?
	}
}

/*
	Asm triangle fill using integers
	no clipping, but higher precision
*/
void r_ncfasthalftrifill(float x0, float x1, int y,
										int dy, float k0, float k1,
										unsigned char c)
{
	int xi0, xi1, ki0, ki1, ye;

	xi0 = (int)(x0*128.0f);
	xi1 = (int)(x1*128.0f);
	ki0 = (int)(k0*128.0f);
	ki1 = (int)(k1*128.0f);

	ye = y + dy;

	if (y >= ye) return;

	y *= W;
	ye *= W;

	asm {
		mov ax, VSTART // video memory start
		mov es, ax

		mov bx, xi0 // initial points
		mov cx, xi1
		mov dx, y
	}
	drawt:
	asm {
		add bx, ki0 // x0 += k0
		add cx, ki1 // x1 += k1
		add dx, W // y += 1
	}
	asm {
		mov di, bx
		sub di, 32 // correction
		sar di, 7 // divide by 128

		mov si, cx
		add si, 32
		sar si, 7
	}
	asm {
		add si, dx // calculate final addresses
		add di, dx

		mov al, c // color
	}
	drawl: // line draw
	asm {
		mov [es:di], al // write to screen
		add di, 1
		cmp di, si
		jb drawl // x < x1?

		mov ax, ye
		cmp dx, ax
		jb drawt // lines left?
	}
}

// optimized
void r_fastdrawtri(float v[3][2], unsigned char c)
{
	float to;
	int xl0;
	int xl1;
	int yl;

	float k0;
	float k1;
	float k2;

	float dx1;
	float dx2;

	float dy1;
	float dy2;

	// transform from gl to pix
	float x0 = (v[0][0]+1.0f)*W*0.5f;
	float y0 = (-v[0][1]+1.0f)*H*0.5f;

	float x1 = (v[1][0]+1.0f)*W*0.5f;
	float y1 = (-v[1][1]+1.0f)*H*0.5f;

	float x2 = (v[2][0]+1.0f)*W*0.5f;
	float y2 = (-v[2][1]+1.0f)*H*0.5f;

	// sort vertices by y
	if (y0 > y2) {
		to = y0;
		y0 = y2;
		y2 = to;
		to = x0;
		x0 = x2;
		x2 = to;
	}
	if (y1 > y2) {
		to = y1;
		y1 = y2;
		y2 = to;
		to = x1;
		x1 = x2;
		x2 = to;
	}
	if (y0 > y1) {
		to = y0;
		y0 = y1;
		y1 = to;
		to = x0;
		x0 = x1;
		x1 = to;
	}

	x0 = round(x0);
	x1 = round(x1);
	x2 = round(x2);

	y0 = round(y0);
	y1 = round(y1);
	y2 = round(y2);

	// bounds
	if (x0 > R && x1 > R && x2 > R)
		return;
	if (x0 < L && x1 < L && x2 < L)
		return;
	if (y0 > B && y1 > B && y2 > B)
		return;
	if (y0 < T && y1 < T && y2 < T)
		return;

	if (wireframe) {
		r_drawlinef(x0, y0, x1, y1, c);
		r_drawlinef(x1, y1, x2, y2, c);
		r_drawlinef(x0, y0, x2, y2, c);

		return;
	}

	// first - last
	dx1 = (x2 - x0);
	dy1 = (y2 - y0);
	k0 = (dx1/dy1);

	// first - mid
	dx1 = (x1 - x0);
	dy1 = (y1 - y0);
	k1 = (dx1/dy1);

	// mid - last
	dx2 = (x2 - x1);
	dy2 = (y2 - y1);
	k2 = (dx2/dy2);

	x1 = x0; // sort x
	to = k0;
	if (k0 > k1) {
		k0 = k1;
		k1 = to;
	}

	// top
	r_fasthalftrifill(x0, x1, (int) y0,
		(int) (dy1 - 1), k0, k1, c);

	k0 = to;
	if (k0 < k2) {
		to = k0;
		k0 = k2;
		k2 = to;
	}
	dy2 += 1.0f;
	y2 = y2 - dy2;
	x1 = x2 - k0*(dy2);
	x2 = x2 - k2*(dy2);

	// bottom
	r_fasthalftrifill(x1, x2, (int) y2,
		(int) (dy2 - 1), k0, k2, c);
}


void r_drawtri3d(vec4* v0, vec4* v1, vec4* v2, unsigned char c)
{
	float t[3][2];

	float z0 = v0->z;
	float z1 = v1->z;
	float z2 = v2->z;

	if (z0 <= ZNEAR || z1 <= ZNEAR || z2 <= ZNEAR)
		return;

	if (z0 >= ZFAR && z1 >= ZFAR && z2 >= ZFAR)
		return;

	// projection
	t[0][0] = v0->x;
	t[0][0] /= z0;
	t[0][1] = v0->y;
	t[0][1] /= z0;

	t[1][0] = v1->x;
	t[1][0] /= z1;
	t[1][1] = v1->y;
	t[1][1] /= z1;

	t[2][0] = v2->x;
	t[2][0] /= z2;
	t[2][1] = v2->y;
	t[2][1] /= z2;

	r_fastdrawtri(t, c);
}

void r_fill()
{
	asm {
		mov ax, 0xa000
		mov es, ax
		mov dl, 2
		mov di, 0xfa00
	}
	draw:
	asm {
		sub di, 1
		mov [es:di], dl
		cmp di, 0
		ja draw
	}
}

void r_clear()
{
	asm {
		mov ax, 0xa0a0
		mov es, ax
		xor di, di
		mov cx, 0xf960
		mov ax, 0
		rep stosw
	}
}

void r_scr()
{
	asm {
		mov ah, 0x6
		xor al, al
		mov bh, 0x3
		mov cx, 0x0100
		mov dx, 0x182a
		int 10h
	}
}

