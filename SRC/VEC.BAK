/*
 * Vector math
 */

#ifndef VEC_H
#define VEC_H

#include <math.h>

struct vec4 {
	float x;
	float y;
	float z;
	float w;
};

struct vec3 {
	float x;
	float y;
	float z;
};

struct vec2 {
	float x;
	float y;
};

struct mat4 {
	float m[4][4];
};

struct vec4 vec4(float x, float y, float z, float w);

// null vector
struct vec4 nvec4();

struct vec3 vec3(float x, float y, float z);

struct vec2 vec2(float x, float y);

struct mat4 mat4(float s);

struct mat4 projmat(float fov, float ar, float fr, float nr);

struct mat4 rotmatY(float a);

// vector addition
struct vec4 v4a(struct vec4 v0, struct vec4 v1);

// vector scaling
struct vec4 v4s(struct vec4 v, float s);

float v4l(struct vec4 v);

struct mat4 rotateX(struct mat4* m, float a);

struct mat4 rotateY(struct mat4* m, float a);

struct mat4 translate(struct mat4* m, struct vec4 v);

// mat4 get row
struct vec4 m4gr(struct mat4 m, int r);

// matrix multiplication, mat4 x vec4
struct vec4 m4xv4(struct mat4* m, struct vec4* v);

struct mat4 m4xm4(struct mat4* m0, struct mat4* m1);

#endif
